package com.company.codegen;

import com.company.Util;

public class TargetC implements TargetFormat {
    public String formatPieceDef(String ident, PieceDef pieceDef) {
        var displayName = pieceDef.props.name();
        return
                ident + ".name = calloc(" + (displayName.length() + 1) + ", sizeof(char));\n"
                        + "strcpy(" + ident + ".name, \"" + displayName + "\");\n"
                        + ident + ".limit = " + pieceDef.props.limit() + ";\n"
                        + ident + ".count = " + pieceDef.count + ";\n"
                        + ident + ".player = &" + pieceDef.ownerPrefix + ";\n";
    }

    public String formatPlayerDef(PlayerDef playerDef) {
        var out = new StringBuilder();

        out.append("struct Player {\n");
        playerDef.player1.forEach((k, _v) -> out.append("  struct Piece ").append(k).append(";\n"));
        out.append("} _p1, _p2;\n");
        playerDef.player1.forEach((_k, v) ->
            out.append(v.toString())
        );
        playerDef.player2.forEach((_k, v) ->
            out.append(v.toString())
        );

        return out.toString();
    };

    public String formatSetup(SetupStruct setupStruct) {
        var out = new StringBuilder("""
                /*    SETUP    */
                """);

        out.append(setupStruct.playerDef)
                .append("struct Piece *_board[")
                .append(setupStruct.boardHeight)
                .append("][")
                .append(setupStruct.boardWidth)
                .append("] = {");

        for (PieceDef[] row : setupStruct.getBoard()) {
            out.append("{");
            for (PieceDef pieceDef : row)
                if (pieceDef != null) {
                    out.append("&")
                            .append(pieceDef.ownerPrefix)
                            .append(".")
                            .append(pieceDef.identifier)
                            .append(",");
                } else out.append("NULL,");

            out.append("},");
        }

        return out.append("};\n")
                .append("""
                    struct Player * _current_player;
                    int _turn_count = 0;
                    int _win_condition = 0;
                    """)
                .append(setupStruct.body.toString())
                .toString();
    }

    public String formatGame(String body, String winCond) {
        return """
        /*   GAME    */
        do {
        _current_player = _turn_count % 2 ? &_p2 : &_p1;
        """
        + body
        + """
        _win_condition"""
        + " = "
        + winCond
        + ";\n"
        + """
        _turn_count++;
        } while (!_win_condition);
        
        """;
    }

    public String format(SetupStruct setupStruct, GameStruct gameStruct) {
        return """
        /* === Code generated by Griddy compiler === */
        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        #include <stdbool.h>

        int main(int argc, char *argv[]){
        struct Piece { char* name; unsigned int limit; unsigned int count; struct Player* player; };
        
        """
        + setupStruct
        + "\n"
        + gameStruct
        + """
        return 0;
        }
        """;
    }

    public String formatTurn(String playerPrefix, String body) {
        return "_current_player = &" + playerPrefix + ";\n" + body + "\n";
    }

    public String outputString(String body) {
        return "printf(\"%s\\n\", " + body + ");\n";
    }

    public String outputNumber(String body) {
        return "printf(\"%d\\n\", " + body + ");\n";
    }

    public String outputTable(String ident, int w, int h) {
        /*
         *     printf("┌───┬───┬─── ... ┐\n");
         *     for (int _i = 0; _i < h; _i++) {
         *         for (int _j = 0; j < w; _j++)
         *             if (str_mtx[_i][_j]) {
         *                 printf("│ %s ", str_mtx[_i][_j]);
         *             } else printf("│   ");
         *         printf("│\n");
         *         if (h != _i + 1) printf("├───┼───┼─── ... ┤\n");
         *     }
         *     printf("└───┴───┴─── ... ┘\n");
         */
        var letterRow = new StringBuilder();
        for (int n : Util.range(1, w))
            letterRow.append("  ").append((char)('A' + n - 1)).append(" ");

        return "printf(\"┌───" + "┬───".repeat(Math.max(0, w - 1)) + "┐\\n\");\n"
                + "for (int _i = 0; _i < " + h + "; _i++) {\n"
                + "for (int _j = 0; _j < " + w + "; _j++)\n"
                + """
                if (_board[_i][_j]) {
                if (_board[_i][_j]->player == &_p1) {
                printf("│ \\x1b[33m\\x1b[1m%c\\x1b[0m ", *_board[_i][_j]->name);
                } else {
                printf("│ %c ", *_board[_i][_j]->name);
                }
                } else printf("│   ");
                printf("│ %d\\n", _i + 1);
                """
                + "if (" + h + " != _i + 1) printf(\"├───" + "┼───".repeat(Math.max(0, w - 1)) + "┤\\n\");\n}\n"
                + "printf(\"└───" + "┴───".repeat(Math.max(0, w - 1)) + "┘\\n\");\n"
                + "printf(\"" + letterRow + "\\n\");\n";
    }

    public String condStmt(String condition, String body) {
        return "if (" + condition + ")\n" + body;
    }

    public String condElse(String body) {
        return "else\n" + body;
    }

    public String assignPieceRef(String ident, int x, int y) {
        return "struct Piece * " + ident + " = " + formatPieceRef(x, y) + ";\n";
    }

    public String formatPieceRef(int x, int y) {
        return "_board[" + (y - 1) + "][" + (x - 1) + "]";
    }

    public String reAssignVar(String ident, String body) {
        return ident + " = " + body + ";\n";
    }

    public String assignString(String ident, String body) {
        return "char *" + ident + ";\n"
                + ident + " = calloc(" + (body.length() + 1) + ", sizeof(char));\n"
                + "strcpy(" + ident + ", \"" + body + "\");\n";
    }

    public String reAssignString(String ident, String body) {
        return ident + " = realloc(" + ident + ", " + (body.length() + 1) + ");\n"
                + "strcpy(" + ident + ", " + body + ");\n";
    }
}
