/* Generated By:JJTree&JavaCC: Do not edit this line. GriddyConstants.java */
package com.company;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GriddyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITE_SPACE = 1;
  /** RegularExpression Id. */
  int SP = 2;
  /** RegularExpression Id. */
  int TAB = 3;
  /** RegularExpression Id. */
  int NEWLINE = 4;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int ELSE = 7;
  /** RegularExpression Id. */
  int FROM = 8;
  /** RegularExpression Id. */
  int ON = 9;
  /** RegularExpression Id. */
  int IN = 10;
  /** RegularExpression Id. */
  int FOR = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int GAME_SETUP = 13;
  /** RegularExpression Id. */
  int GAME_MAIN = 14;
  /** RegularExpression Id. */
  int FUNC_DECL = 15;
  /** RegularExpression Id. */
  int BOARD_DECL = 16;
  /** RegularExpression Id. */
  int ECHO = 17;
  /** RegularExpression Id. */
  int EQ = 18;
  /** RegularExpression Id. */
  int NEQ = 19;
  /** RegularExpression Id. */
  int GEQ = 20;
  /** RegularExpression Id. */
  int LEQ = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int LT = 23;
  /** RegularExpression Id. */
  int GT = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MULT = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int MOD = 31;
  /** RegularExpression Id. */
  int INCR = 32;
  /** RegularExpression Id. */
  int DECR = 33;
  /** RegularExpression Id. */
  int ASSIGN = 34;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 35;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 36;
  /** RegularExpression Id. */
  int MULT_ASSIGN = 37;
  /** RegularExpression Id. */
  int DIV_ASSIGN = 38;
  /** RegularExpression Id. */
  int DOT = 39;
  /** RegularExpression Id. */
  int COMMA = 40;
  /** RegularExpression Id. */
  int SEMICOLON = 41;
  /** RegularExpression Id. */
  int LPAREN = 42;
  /** RegularExpression Id. */
  int RPAREN = 43;
  /** RegularExpression Id. */
  int LBRACE = 44;
  /** RegularExpression Id. */
  int RBRACE = 45;
  /** RegularExpression Id. */
  int LBRACKET = 46;
  /** RegularExpression Id. */
  int RBRACKET = 47;
  /** RegularExpression Id. */
  int BOOL = 48;
  /** RegularExpression Id. */
  int NULL = 49;
  /** RegularExpression Id. */
  int NUM = 50;
  /** RegularExpression Id. */
  int NEG_NUM = 51;
  /** RegularExpression Id. */
  int STRING = 52;
  /** RegularExpression Id. */
  int IDENT = 53;
  /** RegularExpression Id. */
  int IDENT_PART = 54;
  /** RegularExpression Id. */
  int LETTER = 55;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_REGEX = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITE_SPACE>",
    "\" \"",
    "\"\\t\"",
    "<NEWLINE>",
    "<SINGLE_LINE_COMMENT>",
    "\"if\"",
    "\"else\"",
    "\"from\"",
    "\"on\"",
    "\"in\"",
    "\"for\"",
    "\"while\"",
    "\"SETUP\"",
    "\"GAME\"",
    "\"fun\"",
    "\"board\"",
    "\"echo\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\"!\"",
    "\"<\"",
    "\">\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<BOOL>",
    "\"empty\"",
    "<NUM>",
    "<NEG_NUM>",
    "<STRING>",
    "<IDENT>",
    "<IDENT_PART>",
    "<LETTER>",
  };

}
