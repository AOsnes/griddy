# tic_tac_toe.griddy
board (3,3);

piece XO
    placeable: true
end

fun check_win ()
    win_cond = false;

    if !empty? (2,2) && (
        (((( tile (1,1) == tile (2,2) ) && ( tile (3,3) == tile (2,2) )) ||
        (( tile (2,1) == tile (2,2) ) && ( tile (2,3) == tile (2,2) ))) ||
        (( tile (3,1) == tile (2,2) ) && ( tile (1,3) == tile (2,2) ))) ||
        (( tile (1,2) == tile (2,2) ) && ( tile (3,1) == tile (2,2) )))
        win_cond = true;
    else if !empty? (2,1) && (( tile (1,1) == tile (2,1) ) && ( tile (3,1) == tile (2,1) ))
        win_cond = true;
    else if !empty? (1,2) && (( tile (1,1) == tile (1,2) ) && ( tile (1,3) == tile (1,1) ))
        win_cond = true;
    else if !empty? (3,2) && (( tile (3,1) == tile (3,2) ) && ( tile (3,3) == tile (3,2) ))
        win_cond = true;
    else if !empty? (2,3) && (( tile (1,3) == tile (2,3) ) && ( tile (3,3) == tile (2,3) ))
        win_cond = true;
    end

    if (win_cond)
        output @board;
        if (@current_player == @player_one)
            output "Winner: Player 1";
        else
            output "Winner: Player 2";
        end
    end
return win_cond

fun turn ()
    x = 0; y = 0;

    if (@current_player == @player_one)
        output "Current player: Player 1";
    else
        output "Current player: Player 2";
    end

    output "Input X:";
    input x;

    output "Input Y:";
    input y;

    place XO from @current_player at (x,y);
return 0

GAME check_win()
    output @board;
    turn();